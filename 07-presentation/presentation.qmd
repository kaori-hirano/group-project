---
title: "Presentation"
author: "Kaori Hirano, Alicia Nguyen, James Xia"
format: 
  revealjs:
    embed-resources: true
    theme: "serif" 
---

```{r load-packages, echo = FALSE}
library(readr)
library(readxl)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(dplyr))
library(patchwork)
suppressPackageStartupMessages(library(glmnet)) # for ridge, Lasso
suppressPackageStartupMessages(library(randomForest))
suppressPackageStartupMessages(library(caret))
library(Matrix)
library(broom)
library(tree)
library(tibble)
library(plotly)
library(rempsyc)
```

```{r merge-datasets}
wh_2023 <- read_excel("/cloud/project/data/wh_2023.xls")
load("/cloud/project/data/vdemdata-master/data/vdem.RData")
## load the original datasets

need_vdem=c("country_name","year","v2csreprss",'e_civil_war',"e_pt_coup",
            "v2x_partipdem","e_peaveduc","v2x_corr","v2x_cspart","v2xcs_ccsi",
            'e_regionpol')
vdem_use=vdem[,need_vdem]
need_wh=c("Country name","year","Social support","Freedom to make life choices",
          "Generosity","Life Ladder","Healthy life expectancy at birth",
          "Log GDP per capita")
wh_use=wh_2023[,need_wh]
## only select the portions where we need to need for our project

colnames(wh_use)[1] <- "country_name"
## change col name for eaier merge

total=merge(vdem_use, wh_use, by = c("country_name", "year"),
            all.x=TRUE,
            all.y=TRUE) 
##merge data
```

```{r clean-data}
#| message: false
#| warning: false
# Select the time range from 2019 only 
total_2019 <- total[total$year == 2019,]

#replace missing values in each numeric column with median value of column
total_2019 <- total_2019 %>% 
  mutate(across(where(is.numeric),~replace_na(.,median(.,na.rm=TRUE))))

# removing coup and civil war because it was all NA or 0 for 2019
total_2019 <- total_2019 %>% select(-one_of("civil_war", "coup"))

# changes names to shorter and easier to type/remember forms
cs <- total_2019 %>% rename(csrepress = v2csreprss, civil_war = e_civil_war, 
                           coup = e_pt_coup,
                           edu = e_peaveduc, corr = v2x_corr, 
                           cspart = v2x_cspart, 
                           cs_index = v2xcs_ccsi, 
                           social_support = 'Social support', 
                           choices = 'Freedom to make life choices', 
                           gen = Generosity,
                           region = e_regionpol,
                           happ = "Life Ladder", 
                           lifee = "Healthy life expectancy at birth", 
                           gdp = "Log GDP per capita")
```

```{r import-data}
# import data
cs_full <- readRDS("/cloud/project/data/civil_society")
# get only 2019 and remove civil war and coup because there are none in 2019
cs <- cs_full %>% subset(year == 2019) %>% 
        select(-one_of("civil_war", "coup")) %>% drop_na()
```

```{r region-tidying}
# sets as factor
cs$region <- as.factor(cs$region)

# We choose Sub Saharan Africa as the reference level
# We are interested in how all regions differ from one another
# We are not focused on only one specific region so we did not intentionally
# choose Sub Saharan Africa
cs$region <- relevel(cs$region, ref = 4)

# creates new data frame for tree plotting with regions as numbers still
cs_num <- cs

# recodes region to be the region it represents rather than a number value/code
levels(cs$region) <- c('SubSaharanAfrica',
                    'EasternEurope_PostSovietUnion', 
                    'LatinAmerica',
                    'NorthAfrica_MiddleEast',
                    'WesternEurope_NorthAmerica',
                    'EasternAsia',
                    'SouthEasternAsia',
                    'SouthernAsia',
                    'ThePacific',
                    'TheCarribean')
```

## Research Motivation Introduction

::: incremental
-   Definition: Civil society is the "third sector" of society, distinct from government and business, and including family and the private sphere.
-   Research Question: What are the most essential social and political factors in predicting civil society participation?
-   Hypothesis: Social cohesive factors - such as social support, and civil society index - are strongly associated with civil society participation
-   Time focus: 2019, the most recent pre-COVID year
:::

## Introduction to Data

::: incremental
-   Data source: The VDEM Group and World Happiness Index (2019 data)
-   Variable criteria: Most related to civil society (i.e. social support and GDP)
-   Null values were replaced with median values (data is skewed)
-   Variables were scaled for Lasso and Ridge regression
-   Region was converted to a factor with region names
-   Civil wars and coups were dropped due to NA values
:::

## Exploratory Data Analysis

::: incremental
```{r variable-visualization-1}
#| warning: false
#| message: false
# A scatter plot to show the relationship between civil society participation 
# and social support by region

# Reformat the legend
# Custom labels for color legend with text wrapping
custom_labels <-            c("Sub-Saharan Africa",
                              "Eastern European- Post Soviet Union",
                              "Latin America",
                              "North Africa- Middle East",
                              "Western Europe- North America",
                              "Eastern Asia",
                              "South Eastern Asia",
                              "Southern Asia",
                              "The Pacific",
                              "The Caribbean")

# A scatterplot to show the relationship between civil society participation 
# and participation in democracy by region
viz2 <- ggplot(cs, aes(x=v2x_partipdem, 
               y = cspart,
               color = region)) + 
  geom_point() +
  geom_smooth(method = 'lm', aes(group = 1)) +
  labs(x = str_wrap("Participation in Democracy",25),
       y = "Civil Society Participation",
       color = "") + 
  theme(legend.position = "bottom") +
  theme(legend.key.size = unit(.2, 'cm'), legend.title = element_text(size=11),
        legend.text = element_text(size=11))

# A scatterplot to show the relationship between civil society participation 
# and civil society index by region
viz3 <- ggplot(cs, aes(x=cs_index, 
               y = cspart,
               color = region)) + 
  geom_point() +
  geom_smooth(method = 'lm', aes(group = 1)) + 
  labs(x = "Civil Society Index",
       y = str_wrap("Civil Society Participation", 13), 
       color = "") +
  theme(legend.position = "none") + 
  scale_color_discrete(labels = c("Sub-Saharan Africa",
                              str_wrap("Eastern European- Post Soviet Union", 20),
                              "Latin America",
                              str_wrap("North Africa- Middle East", 13),
                              str_wrap("Western Europe- North America", 15),
                              "Eastern Asia",
                              "South Eastern Asia",
                              "Southern Asia",
                              "The Pacific",
                              "The Caribbean"))

## Note that when rendered these three are too squished to be read. 
## might be better to just do them all on their own?
viz3 / viz2 +
  plot_annotation(title = 
  "Civil Society Participation vs. Hypothesized Key Predictors by Region")
```
:::

## Data Exploration Highlights

::: incremental
-   Understanding 3 hypothetically most significant predictors vs. outcome (Civil society participation)
-   Strongest relationship: Civil society index vs. Civil society participation
-   Linear relationships: Civil society index & Participation in Democracy vs. Civil society participation
-   No linear relationship: Social support vs. Civil society participation
-   There are no significant regional differences in predictor or outcome variables
:::

## Regression Models

```{r test-train-split}
# 70, 30 test train split
set.seed(145)
train <- sample(c(TRUE, FALSE), nrow(cs), replace = TRUE, prob=c(.7,.3))
test <- (!train)
val <- test

## Regression
# create x and y for glmnet
set.seed(129)
x <- model.matrix(cspart ~ csrepress+v2x_partipdem+edu+corr+cs_index+
                           social_support+choices+gen+region+lifee+happ+gdp,
                  data = cs)[, -1]
y <- cs$cspart


### Ridge Regression
# set seed for reproducibility
set.seed(129)

# cross validation for best l
cv_r <- cv.glmnet(x[train,], y[train], alpha = 0,
                  # scale the x values
                  lambda = 10^seq(10, -2, length = 100), scale = TRUE)

# saving optimal lambda
bestlam_r <- cv_r$lambda.min

# calculating MSE
ridge_pred <- predict(cv_r, s = bestlam_r,
newx = x[test, ], scale = TRUE)
ridge_mse <- mean((ridge_pred - y[test])^2)

# fits final ridge model
ridge_mod <- glmnet(x, y, alpha = 0, lambda = bestlam_r, scale = TRUE)

# saves coefficients
coef_r <-coef(ridge_mod)

# fits linear ridge model
library(ridge)
lin_ridge <- linearRidge(cspart ~ . -year -country_name, data = cs[train,])
pvals_ridge <- pvals(lin_ridge)
pval_table_ridge=as.data.frame(pvals_ridge$pval)
pval_table_ridge=as.data.frame(rowMeans(pval_table_ridge))
#nice_table(pval_table_ridge)

#| tbl-cap: Ridge result table
# prints important coefficients as a table
ridge_feature_estimate <- ridge_mod %>% tidy() %>%
  select(term, estimate)
# remove intercept
ridge_feature_estimate <- ridge_feature_estimate[-1,]
# add
ridge_feature_estimate <- ridge_feature_estimate %>% add_column()
# ridge_feature_estimate_ordered <- ridge_feature_estimate %>%
#   arrange(desc(abs(pval)))
row.names(pval_table_ridge)=c(1:nrow(pval_table_ridge))
ridge_feature_estimate=merge(ridge_feature_estimate, pval_table_ridge,by='row.names',
            all.x=TRUE)
ridge_feature_estimate_ordered=ridge_feature_estimate%>%
  arrange(desc(abs(estimate))) # %>%
  # mutate(term = c())

#print(ridge_feature_estimate_ordered)
ridge_feature_estimate_ordered_table=ridge_feature_estimate_ordered%>%
  mutate(term = c(
                  "Civil Society Index",
                  "Democracy Participation",
                     "Social Support",
                      "The Pacific",
                    "Latin America",
                    "Eastern European- Post Soviet Union",
                    'Freedom to make life choices',
                    "Gov Corruption Index",
                    "The Caribbean",
                    "North Africa- Middle East",
                    "Eastern Asia",
                    "Southern Asia",
                    "Western Europe- North America",
                    "Log GDP/capita",
                    "life ladder",
                     "Civil Society Repression",
                     "Generosity",
                     "South Eastern Asia",
                  "Education",
                     "Healthy life expectancy at birth"
                     ))
colnames(ridge_feature_estimate_ordered_table)[3] <- "Estimate"
colnames(ridge_feature_estimate_ordered_table)[4] <- "p-values"
ridge_feature_estimate_ordered_table= ridge_feature_estimate_ordered_table[,-c(1)]

# set seed for reproducibility
set.seed(18)
 
# cross validation for best l
cv_l <- cv.glmnet(x[train,], y[train], alpha = 1,
lambda = 10^seq(10, -2, length = 100), scale = TRUE)

# saving optimal lambda
bestlam_l <- cv_l$lambda.min

# calculating MSE
lasso_pred <- predict(cv_l, s = bestlam_l,
# scale x values
newx = x[test, ], scale = TRUE)
lasso_mse <- mean((lasso_pred - y[test])^2)

# fits model
lasso_mod <- glmnet(x, y, lambda = bestlam_l, scale = TRUE)

# saves coefficients
coef_l <-coef(lasso_mod)

# fits model with only important variables to get p vals
lasso_p <- lm(cspart ~ cs_index + v2x_partipdem + social_support + region +
                 lifee, cs[train,])
lasso_p <- glm(cspart ~ cs_index + v2x_partipdem + social_support + region +
                 lifee, cs[train,], family = 'gaussian')

all_lasso=summary(lasso_p)
p_lasso= data.frame(all_lasso$coefficients[,4])

# This show us the p-values
# summary(lasso_p)

# prints important coefficients as a table
lasso_feature_estimate <- lasso_mod %>% tidy() %>%
  select(term, estimate)
row.names(p_lasso)=c(1:nrow(p_lasso))
lasso_feature_estimate=merge(lasso_feature_estimate, p_lasso,by='row.names',
            all.x=TRUE)
lasso_feature_estimate_ordered <- lasso_feature_estimate %>%
  arrange(desc(abs(estimate))) #%>%
  # mutate(term = c())

lasso_feature_estimate_ordered_table=lasso_feature_estimate_ordered%>%
  mutate(term = c("Civil Society Index",
                  'Intercept',
                  "Democracy Participation",
                     "Social Support",
                  "Latin America",
                  "Eastern European- Post Soviet Union",
                      "The Pacific",
                   "North Africa- Middle East",
                    "Healthy life expectancy at birth"
                     ))

#print(lasso_feature_estimate_ordered)
colnames(lasso_feature_estimate_ordered_table)[3] <- "Estimate"
colnames(lasso_feature_estimate_ordered_table)[4] <- "p-values"
lasso_feature_estimate_ordered_table= lasso_feature_estimate_ordered_table[,-c(1)]
```

::: columns
::: {.column width="50%"}
<div>

Ridge - Minimizes the effect of non-influential variables

(optimal lambda with CV)

</div>

```{r ridge-regression}
#| tbl-cap: Ridge result table
nice_table(ridge_feature_estimate_ordered_table)
```
:::

::: {.column width="50%"}
Lasso - Zeros out non-influential variables

(optimal lambda from CV)

```{r lasso-regression}
#| tbl-cap: Lasso result table
nice_table(lasso_feature_estimate_ordered_table)
```
:::
:::

## Tree Methods

```{r tree_method}
# code is attributed to LACOL summer course
# instructors and ISLR authors
format_tree_labels <- function(labels, levels) {
  sapply(labels, \(x) if(grepl(":", x)) clean_col(x, levels) else clean_lt(x))
} 

# replace letter positions with actual level labels
clean_col <- function(x, levels){
  # split the label into label and levels
  x <- str_split_1(x, ":")
  # make new temp objects for the two components
  var <- x[1]
  levs_ids <- x[2]
  # get levels for correct variable
  levs <- levels[[var]]
  # get level ids for *relevant* levels
  levs_ids <- str_split_1(levs_ids, "") 
  levs_ids <- sapply(levs_ids, \(x) which(letters == x))
  # cut down levs to only the required levels
  levs <- levs[levs_ids]
  # paste everything together and return (immplicitly)
  paste0(var, ": ", paste0(levs, collapse = ", "))
}

# space out labels that include only "<"
clean_lt <- function(x){
  # split on <, then recombine with spaces before and after <
  x <- str_split_1(x, "<")
  paste0(x, collapse = " < ")
}

plot_tree <- function(model){
  require(ggdendro)
  # extract necessary information from tree object so that it is ggplotable
  tree_data <- dendro_data(model)
  # create a data frame with the split *values* which dendro_data() doesn't extract
  frame <- model$frame %>%
    rownames_to_column(var = "split") %>%
    mutate(splits = as.data.frame(splits)) %>% 
    unnest(cols = c(splits)) %>% 
    filter(var != "<leaf>") %>% 
    select(cutleft)
  
  # add the splits information in, which dendro_data() misses
  tree_data$labels <- tree_data$labels %>% 
    bind_cols(frame) %>% 
    mutate(label = paste0(as.character(label), cutleft),
           label = format_tree_labels(label, attr(model, "xlevels")))
      
  ggplot(segment(tree_data)) +
    geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
    geom_text(data = label(tree_data), 
              aes(x = x, y = y, label = label), vjust = -0.5, size = 3) +
    geom_text(data = leaf_label(tree_data), 
              aes(x = x, y = y, label = label), vjust = 1.5, size = 2) +
    theme_dendro()
}

```

-   ::: columns
    ::: {.column width="50%"}
    Single Decision Tree

    ```{r tree}
    # sets set for reproducibility
    set.seed(247)

    # creates tree on training data
    tree_train <- tree(cspart ~ . -year -country_name, cs_num,
        subset = train)

    # cross validation of tree
    cv_train <- cv.tree(tree_train)

    # pruning to 8 nodes per CV results
    prune_train <- prune.tree(tree_train, best = 8)

    # plots pruned tree
    plot_tree(prune_train) +
      labs(title = "Pruned Tree Plot",
           caption = 'Regions 1, 2, 3, 7, and 9 represent Eastern Europe & Post
           Soviet Union, Latin America, North Africa and Middle East, South Eastern
           Asia, and the Pacific') +
      # Center the plot title
      theme(plot.title = element_text(hjust = 0.4))

    # gets predictions and test values for mse
    tree_pred_tuned <- predict(prune_train, cs_num[test,],
        type = "vector")

    y_test <- y[test]

    # gets mse for pruned tree
    mse <- mean((tree_pred_tuned - y_test)^2)
    ```

    ::: notes
    We can see that civil society index is the most influential as it is the topmost node of the tree. From there, participation in democracy and regions 1, 2, 3, 7, and 9, which represent Eastern Europe & Post Soviet Union, Latin America, North Africa and Middle East, South Eastern Asia, and the Pacific, were also identified as the most influential predictors in this model when predicting civil society participation.

    tree - Visualize importance and relationships between variables and outcome - Greedy method--may be less generalizable - CV for number of terminal nodes

    random - Relative variable importances - CV for number of considered parameters - More accurate than tree methods
    :::
    :::

    ::: {.column width="50%"}
    <div>

    Random Forests

    ```{r random-forests}
    #| tbl-cap: Tree importance scores
    # sets seed for reproducibility
    set.seed(286)

    # sets cv parameters
    train_control <- trainControl(method="cv", number = 5)

    # gets grid for mtry
    tune_grid <- expand.grid(mtry = 3:12)

    # does training
    best_forest <- train(cspart ~ . -year -country_name, data = cs[train,],
                         trControl = train_control,
                         method="rf",
                         tuneGrid = tune_grid,
                         verbose = FALSE)

    # gets test for y
    y_test <- y[test]

    # predictions for test set with optimal mtry of 9
    rf_cs <- randomForest(cspart ~ . -year -country_name, data = cs[train,],
                           mtry = 9, importance = TRUE)

    yhat_rf <- predict(rf_cs, newdata = cs[test,])

    # calculates MSE
    rf_mse <- mean((yhat_rf - y_test)^2)

    # importances
    importances_cs <- importance(rf_cs) %>%
      as_tibble(rownames = "Variable")

    # plot 1
    p1_rf <- importances_cs %>%
      arrange(`%IncMSE`) %>%
      mutate(Variable = factor(Variable, levels = Variable)) %>%
      ggplot(aes(x = `%IncMSE`, y = Variable)) +
      geom_col(alpha = 0.5) + scale_y_discrete(
              labels = rev(c("Civil Society Index",
                             "Democracy Participation",
                             "Gov Corruption Index",
                             "Region",
                             "Civil Society Repression",
                             "Life Expectancy",
                             "Social Support",
                             "Education",
                             "Log GDP/capita",
                             "Happiness Level",
                             "Generosity",
                             "Choice Freedom"))) +
      labs(title = str_wrap("Variable Importances 1", 13),
           y = "Variables",
           x = str_wrap("% Increase in MSE", 11)) +
      theme_classic()

    # plot 2
    p2_rf <- importances_cs %>%
      arrange(IncNodePurity) %>%
      mutate(Variable = factor(Variable, levels = Variable)) %>%
      ggplot(aes(x = IncNodePurity, y = Variable)) +
      geom_col(alpha = 0.5) + scale_y_discrete(
              labels = rev(c("Civil Society Index",
                             "Democracy Participation",
                             "Civil Society Repression",
                             "Region",
                             "Gov Corruption Index",
                             "Life Expectancy",
                             "Education",
                             "Social Support",
                             "Choice Freedom",
                             "Happiness Level",
                             "Log GDP/capita",
                             "Generosity"))) +
      labs(title = str_wrap("Variable Importances 2", 13),
           x = str_wrap("Increase in Node Impurity", 13)) +
      theme_classic() +
      theme(axis.title.y = element_blank())

    # side by side
    p1_rf + p2_rf

    # prints table of most important variables
    # feature names minus year, country, cspart
    rf_feature_names <- colnames(cs[,c(3:6, 8:15)])

    # importance scores
    rf_importance_scores <- rf_cs$importance[, 1]

    # combine feature names and importance scores
    rf_feature_importance <- tibble(Feature = rf_feature_names,
                                    'Importance Scores' = rf_importance_scores)

    # get desc order for ease of interpretation
    f_feature_importance_ordered <- rf_feature_importance %>%
      mutate(Feature = c("Democracy Participation",
                         "Civil Society Index",
                         "Civil Society Repression",
                         "Gov Corruption Index",
                         "Region",
                         "Life Expectancy",
                         "Education",
                         "Social Support",
                         "Log GDP/capita",
                         "Happiness Level",
                         "Choice Freedom",
                         "Generosity")) %>%
      arrange(desc(abs(rf_importance_scores)))
    ```

    </div>
    :::

    -   Random forests was the most effective model

        -   Lowest MSE: 0.00787

        -   Highest r-squared: 0.88152
    :::

## Conclusions & Future Work

::: incremental
-   Random forests was the most effective model
-   Most important variables: Civil society index, Participation in democracy
-   The results are mostly consistent with our hypothesis
-   Limitations: Non-linear relationships, variable interactions
-   Further research: Variable interactions, time-series analysis, lack of regional specificity
:::
